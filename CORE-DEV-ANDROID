pipeline {
  agent any
  options{
  	timestamps()
	gitLabConnection('')

  		 }

	parameters{
		string(defaultValue: 'develop', description: '', name: 'ARCH_BRANCH')
		string(defaultValue: 'develop', description: '', name: 'APPCORE_BRANCH')
		string(defaultValue: 'develop', description: '', name: 'UIKIT_BRANCH')
		string(defaultValue: 'feature/GMA-5.x', description: '', name: 'SDK_BRANCH')}


  stages {

  	stage('SCM') {

		steps{
  		checkout([$class: 'GitSCM',
			  branches: [[name: 'develop']],
			  doGenerateSubmoduleConfigurations: false,
			  extensions: [[$class: 'SubmoduleOption', disableSubmodules: false, parentCredentials: true, recursiveSubmodules: true, reference: '', timeout: 15, trackingSubmodules: true]],
			  submoduleCfg: [],
			  userRemoteConfigs: [[credentialsId: 'c39b0118-cfc4-4024-ac99-cdf2f69ed733', url: 'ssh://git@coderepository.mcd.com:8443/archus/android.git']]])
			}
  		}

        stage('Checkout') {
          steps {
            sh '''
            echo "*******************Updating submodule*************************"
      MCDARCH_DIR=${WORKSPACE}
      MCDAPPCORE_DIR="${MCDARCH_DIR}/libraries/android-mcd-core-app"
      MCDUIKIT_DIR="${MCDARCH_DIR}/libraries/android-mcd-core-app/libraries/android-mcd-uikit"
      MCDCONNECT_DIR="${MCDARCH_DIR}/libraries/android-mcd-core-app/libraries/android-gma-sdk-sapient"

      echo "*************Checking out McDAppARCH Repository*****************"
      cd "${MCDARCH_DIR}"
      git checkout "${ARCH_BRANCH}"
      git gc --prune=now
      git clean -fdx
      git pull

      echo "*************Checking out McDAppCore Repository*****************"
      cd "${MCDAPPCORE_DIR}"
      git checkout "${APPCORE_BRANCH}"
      git gc --prune=now
      git clean -fdx
      git pull

      echo "*************Checking out McDUIKit Repository*****************"
      cd "${MCDUIKIT_DIR}"
      git checkout "${UIKIT_BRANCH}"
      git gc --prune=now
      git clean -fdx
      git pull

      echo "*************Checking out McDonaldsSDK Repository*****************"
      cd "${MCDCONNECT_DIR}"
      git checkout "${SDK_BRANCH}"
      git gc --prune=now
      git clean -fdx
      git pull'''

sh '''
#echo "*******************Checking if date is empty then set to 1 day limit***********"
#if [ -z "${START_DATE}" ] || [ -z "${END_DATE}" ]; then
#	START_DATE="$(date -v -1d +'%b %d %Y')"
#	END_DATE="$(date +'%b %d %Y')"
#	echo "Start Date: ""$START_DATE"
#    echo "End Date: ""$END_DATE"
#fi


RELEASE_NOTES1=""
NEWLINE=$'\n'
echo "BUILD_TIMESTAMP"=`date +'%Y-%m-%d %H:%M:%S:%Z'` > timestamp.txt
echo "*******************Updating submodule*************************"
MCDARCH_DIR="${WORKSPACE}"
MCDAPPCORE_DIR="${MCDARCH_DIR}/libraries/android-mcd-core-app"
MCDUIKIT_DIR="${MCDARCH_DIR}/libraries/android-mcd-core-app/libraries/android-mcd-uikit"
MCDCONNECT_DIR="${MCDARCH_DIR}/libraries/android-mcd-core-app/libraries/android-gma-sdk-sapient"

echo "*************Checking out McDAppARCH Repository*****************"

cd "${MCDARCH_DIR}"
git checkout "${ARCH_BRANCH}"
git pull
RELEASE_NOTES1="$RELEASE_NOTES1""$NEWLINE""APP commit id""$NEWLINE"
RELEASE_NOTES1=$RELEASE_NOTES1$(git log --no-merges '--pretty=format:%h : %s %cD' --since="$START_DATE" --until="$END_DATE")

echo "*************Checking out McDAppCore Repository*****************"

cd "${MCDAPPCORE_DIR}"
git checkout "${APPCORE_BRANCH}"
git pull
RELEASE_NOTES1="$RELEASE_NOTES1""$NEWLINE""Core Layer commit id""$NEWLINE"
RELEASE_NOTES1=$RELEASE_NOTES1$(git log --no-merges '--pretty=format:%h : %s %cD' --since="$START_DATE" --until="$END_DATE")

echo "*************Checking out McDUIKit Repository*****************"

cd "${MCDUIKIT_DIR}"
git checkout "${UIKIT_BRANCH}"
git pull
RELEASE_NOTES1="$RELEASE_NOTES1""$NEWLINE""UI Kit commit id""$NEWLINE"
RELEASE_NOTES1=$RELEASE_NOTES1$(git log --no-merges '--pretty=format:%h : %s %cD' --since="$START_DATE" --until="$END_DATE")

echo "*************Checking out McDonaldsSDK Repository*****************"

cd "${MCDCONNECT_DIR}"
git checkout "${SDK_BRANCH}"
git pull
RELEASE_NOTES1="$RELEASE_NOTES1""$NEWLINE""SDK Layer commit id""$NEWLINE"
RELEASE_NOTES1=$RELEASE_NOTES1$(git log --no-merges '--pretty=format:%h : %s %cD' --since="$START_DATE" --until="$END_DATE")

cd $WORKSPACE
echo "$RELEASE_NOTES1"
echo `cat timestamp.txt` > release_notes.txt
echo "$NEWLINE""$RELEASE_NOTES" >> release_notes.txt
echo "$NEWLINE""$RELEASE_NOTES1" >> release_notes.txt'''



          }
        }


   stage('Build') {
      steps {
        sh '''
	  #run build
	  ./gradlew clean assembleQARelease
	 '''
    }
    }

/*tage('Test') {
      steps {
        sh './gradlew cleanTest test jacocoTestReport --continue --info'
      }
    } */


    stage('Hockeyapp') {
    	steps {
    	step([$class: 'HockeyappRecorder',
			applications: [[apiToken: '41f5cf2e56fe48d2bd099f98a4011184',
      downloadAllowed: false,
			filePath: 'app/build/outputs/apk/app-US-release.apk',
			mandatory: false, notifyTeam: true,
			releaseNotesMethod: [$class: 'NoReleaseNotes'],
			uploadMethod: [$class: 'VersionCreation',
			appId: '10093d580f0a42269619005f34427aa2']]],
			debugMode: false,
			failGracefully: false])

    	 	 }
}
    }
 post {

		success {

			emailext (
          		subject: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
          		body: """<p>SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
          		  <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>""",
         		recipientProviders: [[$class: 'DevelopersRecipientProvider']],
            to: 'rushikesh.jawali@capgemini.com'
				)

		}


	        failure {

			emailext (
          		subject: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
          		body: """<p>FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
          		  <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>""",
          		recipientProviders: [[$class: 'DevelopersRecipientProvider']],
              to: 'rushikesh.jawali@capgemini.com'
       			 	)

        }
    }
}
